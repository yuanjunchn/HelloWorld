1. 基本操作
git init # 初始化仓库
git status # 查看仓库的状态
touch readme.txt # 在当前目录下新建readme.txt文件
git add # 向暂存区中添加文件
git commit -m "some commit" # 保存仓库的历史记录，同时记述一行提交信息
git commit  # 保存仓库的历史记录，同时打开notepad++ 记录提交信息
git log # 查看提交日志
git log --pretty=short # 只显示提交信息的第一行
Ctrl + c # 退出当前状态
git log <filename> # 只显示指定目录、文件的日志
git log -p <filename> # 显示文件提交所带来的改动
git diff # 查看更改前后的差别
git diff HEAD # add <filename>后查看工作树和最新提交的差别

2.分支的操作
git branch # 显示分支一览表
git checkout -b <branchname> # 创建、切换分支<branchname>
git branch feature-A # 创建分支feature-A
git checkout feature-A # 切换分支feature-A
git checkout master # 切换到master分支
git checkout - # 切换回上一个分支
git merge --no-ff feature-A # 将feature-A合并到当前分支下并提交详细记录信息（windows下有问题）
git merge feature-A # 将feature-A合并到当前分支下
git log --graph # 以图表形式查看分支

3.更改提交的操作
git reset --hard <HASH value> # 回溯特定<HASH value>历史版本
git reflog # 查看当前仓库的操作日志
git commit --amend # 修改提交信息
git commit -am "some commit" # 同时执行git add和git commit命令
git config --global core.editor "'D:/Program Files/Notepad++/notepad++.exe' -mulitInst -notabbar -nosession -noPlugin" # 设置git的core.editor为notepad++
git rebase -i HEAD~2 # 选定当前分支中包含HEAD（最新提交）在内的两个历史记录对象合并
git branch -d  <branchname> # 删除分支<branchname>
git branch -D  <branchname> # 强制删除分支<branchname>
cat <filename> # 查看<filename>内容

4.推送至远程仓库
git remote add origin git@github.com:用户名/仓库名.git # 链接github中的仓库
git push -u origin master # 推送至master分支（第一次）
git push origin master # 推送至master分支（以后）
git push -u origin <featurename> # 推送至featurename分支（第一次）
git push origin <featurename> # 推送至featurename分支（以后）

5.从远程仓库获取
git clone git@github.com:用户名/仓库名.git # 克隆github中的仓库到本地
git branch -a # 查看当前分支的相关信息
git checkout -b <featurename> origin/<featurename> # 获取远程分支<featurename>
git push #推送分支（master也可以）
git pull #获取最新的远程仓库分支

6.添加文件夹
git是不管理空文件夹的，如果添加了文件夹one，同时在其中建立了1.txt
git add one/1.txt # 向暂存区中添加文件